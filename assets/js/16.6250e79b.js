(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{256:function(a,t,r){"use strict";r.r(t);var e=r(38),s=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis","aria-hidden":"true"}},[a._v("#")]),a._v(" redis")]),a._v(" "),r("h2",{attrs:{id:"通信协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通信协议","aria-hidden":"true"}},[a._v("#")]),a._v(" 通信协议")]),a._v(" "),r("p",[a._v("客户端与服务端使用的通信协议， 特点："),r("code",[a._v("实现简单，解析快，良好可读性")])]),a._v(" "),r("ul",[r("li",[r("code",[a._v("+")]),a._v(" 表示正确的状态，信息紧跟")]),a._v(" "),r("li",[r("code",[a._v("-")]),a._v(" 表示错误状态, 信息紧跟")]),a._v(" "),r("li",[r("code",[a._v("*")]),a._v(" 消息体有多少段")]),a._v(" "),r("li",[r("code",[a._v("$")]),a._v(" 下一行长度")]),a._v(" "),r("li",[r("code",[a._v(":")]),a._v(" 返回值，后面跟")])]),a._v(" "),r("h2",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据结构")]),a._v(" "),r("ul",[r("li",[a._v("string(二进制安全，最大512M，原因（没有找到具体说明，纯属个人臆断）：可能是因为长度(bit)使用的u32定义，所以最大是2^32，512M)")]),a._v(" "),r("li",[a._v("list")]),a._v(" "),r("li",[a._v("hash map")]),a._v(" "),r("li",[a._v("set(无序集合，hash 实现)")]),a._v(" "),r("li",[a._v("zset（有序集合，通过double类型的分数决定排位）")])]),a._v(" "),r("h2",{attrs:{id:"持久化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#持久化","aria-hidden":"true"}},[a._v("#")]),a._v(" 持久化")]),a._v(" "),r("h3",{attrs:{id:"rdb"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rdb","aria-hidden":"true"}},[a._v("#")]),a._v(" RDB")]),a._v(" "),r("p",[a._v("redis database, 默认方式，存储数据")]),a._v(" "),r("h3",{attrs:{id:"aof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aof","aria-hidden":"true"}},[a._v("#")]),a._v(" AOF")]),a._v(" "),r("p",[a._v("append only file, 根据条件将 aof_buf 中的缓存写入 aof 文件，再根据一定条件 调用 fsync 写入磁盘，存储 "),r("code",[a._v("通信协议")]),a._v(" 命令文本")]),a._v(" "),r("h3",{attrs:{id:"差异"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#差异","aria-hidden":"true"}},[a._v("#")]),a._v(" 差异")]),a._v(" "),r("ol",[r("li",[a._v("aof文件比rdb更新频率高，优先使用aof还原数据")]),a._v(" "),r("li",[a._v("aof比rdb更安全，但文件更大")]),a._v(" "),r("li",[a._v("rdb性能比aof好")]),a._v(" "),r("li",[a._v("如果两个都配了优先加载AOF")])]),a._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),r("h3",{attrs:{id:"一致性-hash-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一致性-hash-算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 一致性 HASH 算法")]),a._v(" "),r("p",[a._v("将存储节点hash后放到一个圆上，然后将数据也hash后放到圆上，顺时针遇到的第一个节点就是数据存储节点")]),a._v(" "),r("p",[a._v("掉点或者增加节点只会影响顺时针后的下一个节点的数据，其他节点没有影响")]),a._v(" "),r("h3",{attrs:{id:"hash-槽"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hash-槽","aria-hidden":"true"}},[a._v("#")]),a._v(" hash 槽")]),a._v(" "),r("p",[a._v("redis 集群中，一共 2 ^ 14 （16384）个槽位，每个MASTER节点拥有一个槽位区间")]),a._v(" "),r("p",[a._v("存储: key 根据crc-16(16位冗余校验) % 2 ^ 14 的值判断进入哪个槽区，从而知道在哪个节点")]),a._v(" "),r("p",[r("img",{attrs:{src:"/img/redis-slot.jpeg",alt:"SLOT"}})])])},[],!1,null,null,null);t.default=s.exports}}]);