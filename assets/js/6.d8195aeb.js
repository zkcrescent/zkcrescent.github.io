(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{255:function(e,a,r){"use strict";r.r(a);var _=r(38),v=Object(_.a)({},function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"heroku"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#heroku","aria-hidden":"true"}},[e._v("#")]),e._v(" Heroku")]),e._v(" "),r("p",[e._v("美国的一家做PaaS的公司，产品很有特色，初次接触的人会容易被它提供服务的特点惊艳到 "),r("em",[e._v("(:зゝ∠)")])]),e._v(" "),r("h2",{attrs:{id:"特点-新颖点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特点-新颖点","aria-hidden":"true"}},[e._v("#")]),e._v(" 特点 + 新颖点")]),e._v(" "),r("h3",{attrs:{id:"登录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#登录","aria-hidden":"true"}},[e._v("#")]),e._v(" 登录")]),e._v(" "),r("p",[e._v("和传统的CLI登录方式有所区别的是，当使用 heroku cli 登录时，会弹出浏览器窗口直接点击即可登录，很有特色")]),e._v(" "),r("h3",{attrs:{id:"dataclips（挺有用的）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dataclips（挺有用的）","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://devcenter.heroku.com/articles/dataclips",target:"_blank",rel:"noopener noreferrer"}},[e._v("DataClips"),r("OutboundLink")],1),e._v("（挺有用的）")]),e._v(" "),r("p",[e._v("可以通过共享Query方式实现共享你在heroku中的存储数据（各种 stroe add-on）")]),e._v(" "),r("h3",{attrs:{id:"dynos-测力计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dynos-测力计","aria-hidden":"true"}},[e._v("#")]),e._v(" Dynos (测力计)")]),e._v(" "),r("p",[e._v("heroku 中，app 对应的一个容器集合叫做 dynos, 管理 APP 的runtime，容器资源限制也是从 dynos 中控制的, heroku 提供了6个标准的 dynos 类型，规定了基本的配置，\n中间有几个指标比较在意")]),e._v(" "),r("ol",[r("li",[e._v("preboot")]),e._v(" "),r("li",[e._v("Number of process types")]),e._v(" "),r("li",[e._v("Language runtime metric")]),e._v(" "),r("li",[e._v("没有确切CPU多少的说明，文档中有规格大概是2:5X（1C）免费的是1x-4x")]),e._v(" "),r("li",[e._v("企业专用 dynos 提供 auto scaling")])]),e._v(" "),r("p",[e._v("水平扩展增加数量，垂直伸展换配置")]),e._v(" "),r("p",[e._v("auto scaling: p95 Response Time: 过去一小时内百分之95的请求平均时间，周期触发，最小一分钟，触发如果超过水位线，将会调度或者杀掉一个实例")]),e._v(" "),r("h3",{attrs:{id:"stack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stack","aria-hidden":"true"}},[e._v("#")]),e._v(" stack")]),e._v(" "),r("p",[e._v("执行的 os base image,可以指定为标准 stack: heroku-16 heroku-18(ubuntu 16.04 ubuntu 16.08),其他为"),r("code",[e._v("container")])]),e._v(" "),r("h3",{attrs:{id:"heroku-yaml"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#heroku-yaml","aria-hidden":"true"}},[e._v("#")]),e._v(" heroku.yaml")]),e._v(" "),r("p",[e._v("定义 Docker image 如何编译，以及启动方式，需要配置你的 "),r("code",[e._v("stack")]),e._v(" 为 "),r("code",[e._v("container")]),e._v("，可以在"),r("code",[e._v("build")]),e._v("中配置"),r("code",[e._v("config")]),e._v("的值设置"),r("code",[e._v("Dockerfile")]),e._v("中的"),r("code",[e._v("ARG")]),e._v("字段，可以配置多"),r("code",[e._v("target")]),e._v("，同时配置 "),r("code",[e._v("release")]),e._v(" 的类型对应哪个target")]),e._v(" "),r("h4",{attrs:{id:"setup"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#setup","aria-hidden":"true"}},[e._v("#")]),e._v(" setup")]),e._v(" "),r("p",[e._v("通过 "),r("code",[e._v("heroku.yaml.setup")]),e._v(" 可以直接布置一个你的初始应用状态，包括 "),r("code",[e._v("addons")]),e._v(" 和 "),r("code",[e._v("config var")]),e._v("(这个用来干嘛的没看到)")]),e._v(" "),r("h3",{attrs:{id:"build-packs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#build-packs","aria-hidden":"true"}},[e._v("#")]),e._v(" Build Packs")]),e._v(" "),r("p",[e._v("keroku 提供官方的标准 "),r("code",[e._v("buildpack")]),e._v("，可以配置相关的参数，比如 golang 中的 CGO_LDFALGS 什么的，如果不添加任何 "),r("code",[e._v("buildpack")]),e._v(" 配置，将会使用默认的检测工具检查代码属于什么语言类型，找到对应的编译语言后使用官方标准编译相关代码，默认官方提供的 "),r("code",[e._v("buildpack")]),e._v(" 是 "),r("code",[e._v("latest")]),e._v("，如果要使用某个固定版本的，需要直接指定对应的 "),r("code",[e._v("buildpack")]),e._v(" full url（仓库地址）, 编译使用的base image 为 "),r("code",[e._v("STACK")])]),e._v(" "),r("p",[e._v("一个 "),r("code",[e._v("app")]),e._v(" 可以指定多个 buildpack: "),r("code",[e._v("heroku buildpacks:add --index 1 heroku/go")])]),e._v(" "),r("p",[e._v("支持三方 buildpack ,通过官方提供的 buildpack 平台查找或者使用某个符合 heroku buildpack 规则的 git 仓库可以指定需要使用的三方 buildpack，支持仓库的 tag 或者 branch 指定某个 buildpack 的版本")]),e._v(" "),r("p",[e._v("buildpack 指定三个的 script")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("bin/detect")]),e._v(": 校验编译准备的合法性，比如是否存在什么东西，什么变量")]),e._v(" "),r("li",[r("code",[e._v("bin/compile")]),e._v(": 执行一些前期准备之类的东西")]),e._v(" "),r("li",[r("code",[e._v("bin/release")]),e._v(": 提供 meta 信息用于执行期")])]),e._v(" "),r("h4",{attrs:{id:"bin-detect-build-dir"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bin-detect-build-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" bin/detect BUILD_DIR")]),e._v(" "),r("p",[e._v("脚本执行必须返回 "),r("code",[e._v("0")]),e._v(" 才算作成功，同时从 "),r("code",[e._v("stdout")]),e._v(" 应当输出明确的 framwork 名称")]),e._v(" "),r("h4",{attrs:{id:"bin-compile-build-dir-cache-dir-env-dir"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bin-compile-build-dir-cache-dir-env-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" bin/compile BUILD_DIR CACHE_DIR ENV_DIR")]),e._v(" "),r("p",[e._v("实际编译过程，"),r("code",[e._v("BUILD_DIR")]),e._v(" 是 app 编译目录， "),r("code",[e._v("CACHE_DIR")]),e._v(" 是缓存或者长线编译过程中的中间产物，每次编译都会用到这些东西， "),r("code",[e._v("ENV_DIR")]),e._v(" 包含了应用的配置变量，可以通过 "),r("code",[e._v("Profile")]),e._v(" 将其内容转变为 "),r("code",[e._v("env")]),e._v(" 变量，"),r("code",[e._v("ENV_DIR")]),e._v(" 中一个文件的文件名是变量名，文件内容是变量的值， 标准 "),r("code",[e._v("env")]),e._v(" 仅提供 "),r("code",[e._v("STACK")]),e._v(" 和 "),r("code",[e._v("SOURCE_VERSION")]),e._v(" 两个基本信息，应当在任何主要步骤执行前明确的使用 "),r("code",[e._v("-----\x3e")]),e._v(" 6-char arrow 显示执行的步骤")]),e._v(" "),r("h4",{attrs:{id:"bin-release-build-dir"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bin-release-build-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" bin/release BUILD_DIR")]),e._v(" "),r("p",[e._v("两个字段:")]),e._v(" "),r("ul",[r("li",[e._v("addons: []string, 需要添加的addon(会在app之前完成)")]),e._v(" "),r("li",[e._v("default_process_types: 默认的 "),r("code",[e._v("Procfile")]),e._v(" 入口，比如： web: bin/node server.js 当然也可以写"),r("code",[e._v("Procfile")]),e._v("指定而不写这个")])]),e._v(" "),r("h4",{attrs:{id:"procfile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#procfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Procfile")]),e._v(" "),r("p",[e._v("主目录下的名为 "),r("code",[e._v("Procfile")]),e._v(" 的文件，定义应用类型以及对应的执行入口")]),e._v(" "),r("h4",{attrs:{id:"profile-d-profile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#profile-d-profile","aria-hidden":"true"}},[e._v("#")]),e._v(" .profile.d/.profile")]),e._v(" "),r("p",[e._v("开始"),r("code",[e._v("release")]),e._v("之前会通过一个 bash shell "),r("code",[e._v("soruce .profile.d/*.sh")]),e._v(" 执行所有的shell 文件, 然后执行 "),r("code",[e._v(".profile")]),e._v(" 文件")])])},[],!1,null,null,null);a.default=v.exports}}]);