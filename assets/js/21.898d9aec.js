(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{260:function(a,t,e){"use strict";e.r(t);var r=e(38),s=Object(r.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"mysql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql","aria-hidden":"true"}},[a._v("#")]),a._v(" MYSQL")]),a._v(" "),e("p",[a._v("常见问题一览")]),a._v(" "),e("h2",{attrs:{id:"事务四大特性-acid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务四大特性-acid","aria-hidden":"true"}},[a._v("#")]),a._v(" 事务四大特性(ACID)")]),a._v(" "),e("ul",[e("li",[a._v("原子性 atomic: 事务要么完成要么不完成")]),a._v(" "),e("li",[a._v("一致性 consistent: 事务开始前后数据完整性约束保持不变")]),a._v(" "),e("li",[a._v("隔离性 isolation: 两次事务的执行在同一时间上对同一数据仅有一个操作")]),a._v(" "),e("li",[a._v("持久性 durable: 完成的事务将持久保存在数据库中，不会被回滚")])]),a._v(" "),e("h2",{attrs:{id:"存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储","aria-hidden":"true"}},[a._v("#")]),a._v(" 存储")]),a._v(" "),e("p",[a._v("索引,采用B tree，树的一级会过百，所以层级很低，检索速度会很快，用红黑树会因为数据增加而导致树阶增高，检索速度下降（存储和ETCD相似，硬盘结构和内存块大小对应，一次读取一个硬盘块（预读，理论，局部性原理：一个数据使用时其前后数据的使用概率会很大））")]),a._v(" "),e("h2",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 优化")]),a._v(" "),e("ol",[e("li",[a._v("减少冗余(节省空间)")]),a._v(" "),e("li",[a._v("增加冗余(减少Join)")]),a._v(" "),e("li",[a._v("拆表，让不同的数据处于不同物理分区，检索时只需要在对应分区上，检索，减少整表查询\n"),e("ul",[e("li",[a._v("垂直拆分：不同表放在不同服务器上，IO竞争减少")]),a._v(" "),e("li",[a._v("水平拆分：同表不同逻辑，比如购物单按男女拆分到不同机器，女性购物单（女性购物居多）放到IO密集的SERVER，这样可以")])])])]),a._v(" "),e("h2",{attrs:{id:"锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁","aria-hidden":"true"}},[a._v("#")]),a._v(" 锁")]),a._v(" "),e("h3",{attrs:{id:"mysql-isam"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-isam","aria-hidden":"true"}},[a._v("#")]),a._v(" mysql isam")]),a._v(" "),e("p",[a._v("支持表锁，包括写独占锁和读共享锁，类似MUTEX，读共享，读写，写写互锁")]),a._v(" "),e("h3",{attrs:{id:"mysql-innodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-innodb","aria-hidden":"true"}},[a._v("#")]),a._v(" mysql innodb")]),a._v(" "),e("p",[a._v("支持事务，行锁")]),a._v(" "),e("p",[a._v("包括 共享锁，S锁(读锁)和X锁，排它锁（写锁）")]),a._v(" "),e("p",[a._v("基本的"),e("code",[a._v("select ... from ...where ...")]),a._v("不加锁")]),a._v(" "),e("p",[a._v("根据操作是否有写操作，如"),e("code",[a._v("update , delete, insert, select for update")]),a._v(" 会加S锁，"),e("code",[a._v("select in share mode")]),a._v(" 会加S锁")]),a._v(" "),e("h4",{attrs:{id:"is-ix锁（统称共享意向锁）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-ix锁（统称共享意向锁）","aria-hidden":"true"}},[a._v("#")]),a._v(" IS, IX锁（统称共享意向锁）")]),a._v(" "),e("p",[a._v("innodb中存在上述两种锁，是对应到表级别的读写锁，当需要获取行锁时，必须获取对应的表的意向锁，该锁由DB自己控制")]),a._v(" "),e("h4",{attrs:{id:"锁实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 锁实现")]),a._v(" "),e("p",[a._v("oracle 中锁是对数据行加锁，而 innodb 中是对索引加锁，意思是："),e("code",[a._v("当且从索引检索数据才会使用行锁，否则将会使用表锁")]),a._v("，同时需要注意"),e("code",[a._v("同表同索引检索，也会出现锁竞争")])])])},[],!1,null,null,null);t.default=s.exports}}]);