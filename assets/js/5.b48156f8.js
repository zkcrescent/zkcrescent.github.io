(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{247:function(e,t,a){"use strict";a.r(t);var r=a(38),v=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd","aria-hidden":"true"}},[e._v("#")]),e._v(" Etcd")]),e._v(" "),a("p",[e._v("官方定义: 为"),a("code",[e._v("共享配置")]),e._v("和"),a("code",[e._v("服务发现")]),e._v("而生的高可用"),a("code",[e._v("键值存储")])]),e._v(" "),a("div",{staticClass:"desc custom-block"},[a("p",[e._v("A highly-available key value store for shared configuration and service discovery.")])]),e._v(" "),a("h2",{attrs:{id:"架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构","aria-hidden":"true"}},[e._v("#")]),e._v(" 架构")]),e._v(" "),a("p",[a("img",{attrs:{src:"/img/etcd-arch.jpg",alt:"ARCH"}})]),e._v(" "),a("h4",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明","aria-hidden":"true"}},[e._v("#")]),e._v(" 说明")]),e._v(" "),a("ul",[a("li",[e._v("HTTP SERVER: 用户交互API")]),e._v(" "),a("li",[e._v("RAFT : 强一致性算法，同步各个节点的数据状态")]),e._v(" "),a("li",[e._v("STORE： 数据处理，监控，反馈，事件处理和执行等，ETCD对用户提供的大多数API的具体实现")]),e._v(" "),a("li",[e._v("WAL: Write Ahead Log（预写式日志），etcd的数据存储方式，所有提交都会先预写")])]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("通常，用户提交请求从HTTP SERVER转发给STORE处理事务，如果涉及节点修改，则交给RAFT进行状态变更的记录，然后同步给其他ETCD节点，最后进行数据提交，再次进行同步")])]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("因为 raft 采用的是投票选举 leader 的方式，所以建议节点采用奇数个节点作为集群节点有利于投票产生结果")])]),e._v(" "),a("div",{staticClass:"desc custom-block"},[a("p",[e._v("对 etcd 实际使用实践不做累述，参考官方和各大文章即可")])]),e._v(" "),a("h3",{attrs:{id:"etcd-v3-重要变更（部分）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd-v3-重要变更（部分）","aria-hidden":"true"}},[e._v("#")]),e._v(" etcd v3 重要变更（部分）")]),e._v(" "),a("ol",[a("li",[e._v("IANA 认证端口 2379（CS）,2380（NN）")]),e._v(" "),a("li",[e._v("任何节点proxy请求到leader使得可以通过任意节点对整个集群的数据进行操作")]),e._v(" "),a("li",[e._v("任一节点监听多个广播地址")]),e._v(" "),a("li",[e._v("节点拥有独立ID，分辨请求")]),e._v(" "),a("li",[e._v("启动配置固定，节点变化可以在运行时变动")]),e._v(" "),a("li",[e._v("raft 重写，日志严格使用wal，CRC校验（循环冗余校验）")]),e._v(" "),a("li",[e._v("配置可通过环境变量")])]),e._v(" "),a("h3",{attrs:{id:"term"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#term","aria-hidden":"true"}},[e._v("#")]),e._v(" Term")]),e._v(" "),a("ul",[a("li",[e._v("Raft: etcd 采用的分布式系统强一致性算法")]),e._v(" "),a("li",[e._v("Node: raft 状态实例")]),e._v(" "),a("li",[e._v("Member: 一个etcd实例，管理一个Node和提供api 服务")]),e._v(" "),a("li",[e._v("Peer: 同一集群中另一个 member 的称呼")]),e._v(" "),a("li",[e._v("Snapshot: 防止 wal 日志过大而设置的某个时间点的数据状态快照")]),e._v(" "),a("li",[e._v("Proxy: etcd的一种模式，为 etcd 集群提供反向代理")]),e._v(" "),a("li",[e._v("Leader: Raft 中通过 vote 产生的中心处理节点")]),e._v(" "),a("li",[e._v("Follower: Raft 中 vote 失败的节点，提供强一致性保证")]),e._v(" "),a("li",[e._v("Candidate:当 Leader 心跳超时后,  follower 进入 candidate 开始重新 vote 新的 leader")]),e._v(" "),a("li",[e._v("Term: Vote 开始到下次 vote 的时间叫做一个 term")]),e._v(" "),a("li",[e._v("Index: 数据编号， raft 中通过 term 和  index 定位数据")])]),e._v(" "),a("h3",{attrs:{id:"节点变更"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点变更","aria-hidden":"true"}},[e._v("#")]),e._v(" 节点变更")]),e._v(" "),a("p",[e._v("etcd 支持运行时的节点变动（增加，删除，迁移等），此时的变更对 etcd 来说也是一次信息存储和同步，当且存在足够正常节点的情况下才能进行变动\netcd 正常运行的条件是"),a("code",[e._v("多数节点正常工作")]),e._v("，所以出现节点损坏时需要及时修复，同时也变相需求节点数尽可能为奇数，有利于集群情况的准确掌控")]),e._v(" "),a("h4",{attrs:{id:"关于节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于节点","aria-hidden":"true"}},[e._v("#")]),e._v(" 关于节点")]),e._v(" "),a("p",[e._v("节点数量增多会提高集群可用性，因为上文提到的 etcd的正常运行条件决定的，同时可以提高读取吞吐，但是会降低写入速度，需要参考实际情况决定数量，理论上没有上限，官方建议不要大于7，最佳实践为5个，两个容错可以支持绝大多数场景了，太多会导致写成本太大")]),e._v(" "),a("p",[e._v("当节点损坏时，如果存在任何数据损坏或者丢失的可能性(磁盘问题，数据过期等), 最佳操作时移除该节点，然后添加一个全新的节点")]),e._v(" "),a("h3",{attrs:{id:"存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储","aria-hidden":"true"}},[e._v("#")]),e._v(" 存储")]),e._v(" "),a("p",[e._v("etcd 存储两个部分，snapshot 和 wal，snapshot 默认10000条记录做一次 snapshot，然后删除  之前的 wal")]),e._v(" "),a("p",[e._v("etcd 没有固定的存储限制(包括key, value)， 但是 API 有最大请求限制，默认 1.5m，可以通过参数"),a("code",[e._v("--max-request-bytes")]),e._v(" 修改，\n数据存储最大默认值为 2G,"),a("code",[e._v("--quota-backend-bytes")]),e._v("修改,最大建议 8G，超过会在etcd启动时给出提示，过大影响 etcd 性能")]),e._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",[e._v("提高请求限制可以保证工作，但是对其他请求会存在潜在影响"),a("br"),e._v("\n什么影响？未知，仅从"),a("a",{attrs:{href:"https://github.com/etcd-io/etcd/blob/master/Documentation/dev-guide/limit.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("官档"),a("OutboundLink")],1),e._v("中看到这样的说明_(:з」∠)_")])]),e._v(" "),a("p",[e._v("etcd 检索值的最大耗时是在读取磁盘数据上，内存检索Key是极快的，降低磁盘检索时间（也可以对应成磁盘检索次数，因为单位次数检索时间是相同的）即可有效降低检索时间")]),e._v(" "),a("p",[e._v("原理：\nv3 中，key 按 B 树存储在内存中，值按 B+树存储在硬盘中")]),e._v(" "),a("p",[e._v("内存中 B 树 search key 为 etcd 的 key ,树的节点信息为 revision 信息")]),e._v(" "),a("p",[e._v("硬盘中 B+ 树 search key 为 etcd reversion 的值，节点存放 key, value 信息")]),e._v(" "),a("p",[e._v("通过将数据节点大小控制为内存分页大小（一般4KB），同时内存分页大小等于硬盘块大小，每次读取硬盘是4kb的数据块而不是单个数据，读取到数据后内存中查找相应位置然后再进行下次硬盘访问或者返回结果\n检索过程：")]),e._v(" "),a("ul",[a("li",[e._v("内存中通过B树找到对应 KEY 的 revisions (一组 revisions，根据用户需求查找最大 revision的 value 还是固定 revision )")]),e._v(" "),a("li",[e._v("硬盘中通过 revision 作为 search key，B+ 树查找对应 k,v 信息")])]),e._v(" "),a("h3",{attrs:{id:"raft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft","aria-hidden":"true"}},[e._v("#")]),e._v(" Raft")]),e._v(" "),a("p",[e._v("怎么实现的参考网络上的文档即可不做累述，这里列举一些 raft 相关的常见问题")]),e._v(" "),a("h4",{attrs:{id:"raft中一个-term（任期）是什么意思？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft中一个-term（任期）是什么意思？","aria-hidden":"true"}},[e._v("#")]),e._v(" Raft中一个 term（任期）是什么意思？")]),e._v(" "),a("p",[e._v("从时间上，一个任期讲即从一次竞选开始到下一次竞选开始。"),a("br"),e._v("\n从功能上，如果 follower 接收不到 leader 节点的心跳信息，就会结束当前任期，变为 candidate 发起竞选，有助于 leader 节点故障时集群的恢复。"),a("br"),e._v("\n发起竞选投票时，任期值小的节点不会竞选成功。"),a("br"),e._v("\n如果集群不出现故障，那么一个任期将无限延续下去。"),a("br"),e._v("\n投票出现冲突也有可能直接进入下一任再次竞选。"),a("br")]),e._v(" "),a("h4",{attrs:{id:"raft状态机是怎样切换的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft状态机是怎样切换的","aria-hidden":"true"}},[e._v("#")]),e._v(" Raft状态机是怎样切换的")]),e._v(" "),a("ul",[a("li",[e._v("开始运行时，节点默认进入 follower 状态，等待 leader 发来心跳信息。")]),e._v(" "),a("li",[e._v("若等待超时，则状态由 follower 切换到 candidate 进入下一轮 term 发起竞选，等到收到集群多数节点的投票时，该节点转变为 leader 。")]),e._v(" "),a("li",[e._v("leader 节点有可能出现网络等故障，导致别的节点发起投票成为新 term 的 leader，此时原先的老leader 节点会切换为 follower。")]),e._v(" "),a("li",[e._v("candidate 在等待其它节点投票的过程中如果发现别的节点已经竞选成功成为 leader ，也会切换为follower 节点。")])]),e._v(" "),a("h4",{attrs:{id:"如何保证最短时间内竞选出leader，防止竞选冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证最短时间内竞选出leader，防止竞选冲突","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何保证最短时间内竞选出Leader，防止竞选冲突")]),e._v(" "),a("ul",[a("li",[e._v("candidate 状态时的 time out 是随机的,也就是说不同节点进入 term 的时间是不同的，会有一个时间差")]),e._v(" "),a("li",[e._v("时间差内如果收到的竞选信息 term 大于自己发起的 term，并且新 term 所在节点包含所有提交过的数据，则票投给对应节点")]),e._v(" "),a("li",[e._v("竞选只会极小可能性出现冲突（rand 值相同且同时开始竞选且两节点均完好）")])]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("同时因为投票时会校验所在节点是否数据完整，不完整的节点投票会否定，从而也防止了 candidate 在数据缺失的情况下当选 leader 污染数据")])]),e._v(" "),a("h4",{attrs:{id:"raft-某节点宕机会怎样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-某节点宕机会怎样","aria-hidden":"true"}},[e._v("#")]),e._v(" raft 某节点宕机会怎样")]),e._v(" "),a("ul",[a("li",[e._v("通常情况下，剩余节点大于过半，没有任何影响")]),e._v(" "),a("li",[e._v("如果 leader 宕机，会有 follower 收到心跳超时进入 candidate 当选 leader 重新服务")])]),e._v(" "),a("h4",{attrs:{id:"raft-为何不考虑拜占庭将军问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-为何不考虑拜占庭将军问题","aria-hidden":"true"}},[e._v("#")]),e._v(" raft 为何不考虑拜占庭将军问题")]),e._v(" "),a("ul",[a("li",[e._v("拜占庭将军问题中 n 个节点宕机后还能继续提供正常服务的饭不是架构总节点应当 >= 3n+1（已经被证明）, 但 raft 只需要 2n + 1 个节点")]),e._v(" "),a("li",[e._v("原因： 拜占庭问题中会出现数据欺骗的问题，而 raft 中数据都是真实的")]),e._v(" "),a("li",[e._v("candidate 竞选时会提交自己的 term 编号和最后的 index 值，这些值都是可信的，其他节点根据这些可信信息决定是否投票")]),e._v(" "),a("li",[e._v("etcd 严格限制数据都是从 leader -> follower，不会出现数据不一致")])]),e._v(" "),a("h4",{attrs:{id:"用户读取数据应该从哪个节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户读取数据应该从哪个节点","aria-hidden":"true"}},[e._v("#")]),e._v(" 用户读取数据应该从哪个节点")]),e._v(" "),a("ul",[a("li",[e._v("理论上任何一个节点均可，因为数据提交时必然通过 leader 处理后提交，经过过半的节点数据确认，不一致将会覆盖，后才算完整存储，最后再次同步给其他节点")]),e._v(" "),a("li",[e._v("每个节点都有 raft 的准确备份，（最坏情况是数据已经提交但是节点没有完全同步），所以可以从任意节点读取")])]),e._v(" "),a("h4",{attrs:{id:"raft-性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-性能","aria-hidden":"true"}},[e._v("#")]),e._v(" raft 性能")]),e._v(" "),a("ul",[a("li",[e._v("1000 qps写入")]),e._v(" "),a("li",[e._v("节点越多，同步会越来越慢，读取性能增强")])]),e._v(" "),a("h5",{attrs:{id:"本文由来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本文由来","aria-hidden":"true"}},[e._v("#")]),e._v(" 本文由来")]),e._v(" "),a("p",[e._v("很久之前看过 etcd 的一些东西，但是几乎又忘了，去广州的时候遇到了相关问题，正好就整理一下常见问题")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("一些相关链接")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://etcd.io/docs/v3.3.12/faq/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方FAQ，提供了不少实践说明"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/B-tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("B树"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/B%2B_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("B+树"),a("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=v.exports}}]);